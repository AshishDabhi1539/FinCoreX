package com.tss.model;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class MovieManager {

    private static final int MAX_MOVIES = 5;
    private static final String FILE_NAME = "movies.ser";
    private List<Movie> movies;

    public MovieManager() {
        movies = loadMovies();
    }

    @SuppressWarnings("unchecked")
    private List<Movie> loadMovies() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            return (List<Movie>) ois.readObject();
        } catch (Exception e) {
            return new ArrayList<>();
        }
    }

    private void saveMovies() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(movies);
        } catch (IOException e) {
            System.out.println("Error saving movies.");
        }
    }

    public void addMovie(String name, String genre, int year) throws MovieStoreFullException {
        if (movies.size() >= MAX_MOVIES) {
            throw new MovieStoreFullException("Cannot add more movies. Movie store is full.");
        }

        Movie movie = new Movie(name, genre, year);
        movies.add(movie);
        saveMovies();
        System.out.println("Movie added successfully.");
    }

    public void displayMovies() throws MovieStoreEmptyException {
        if (movies.isEmpty()) {
            throw new MovieStoreEmptyException("No movies to display.");
        }

        System.out.println("+--------+----------------------+------------+------+\n" +
                           "| ID     | Name                 | Genre      | Year |\n" +
                           "+--------+----------------------+------------+------+" );
        for (Movie movie : movies) {
            System.out.println(movie);
        }
        System.out.println("+--------+----------------------+------------+------+\n");
    }

    public void deleteMovie(String id) throws MovieStoreEmptyException {
        if (movies.isEmpty()) {
            throw new MovieStoreEmptyException("No movies to delete.");
        }
        boolean removed = movies.removeIf(movie -> movie.id.equalsIgnoreCase(id));
        saveMovies();
        System.out.println(removed ? "Movie deleted." : "Movie ID not found.");
    }

    public void clearMovies() {
        movies.clear();
        saveMovies();
        System.out.println("All movies cleared.");
    }
}
