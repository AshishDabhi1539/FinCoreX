import java.io.*;
import java.util.Scanner;

class Movie implements Serializable {
    String id, name, genre;
    int year;

    public Movie(String name, String genre, int year) {
        this.name = name;
        this.genre = genre;
        this.year = year;
        this.id = generateId(name, genre, year);
    }

    private String generateId(String name, String genre, int year) {
        String yearStr = String.valueOf(year);
        return name.substring(0, 2) + genre.substring(0, 2) + yearStr.substring(yearStr.length() - 2);
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Genre: " + genre + ", Year: " + year;
    }
}

class MovieStoreFullException extends Exception {
    public MovieStoreFullException(String message) {
        super(message);
    }
}

class MovieStoreEmptyException extends Exception {
    public MovieStoreEmptyException(String message) {
        super(message);
    }
}

public class SimpleMoviesApp {
    private static final int MAX_MOVIES = 5;
    private static final String FILE_NAME = "movies.ser";
    private List<Movie> movies;

    public SimpleMoviesApp() {
        movies = loadMovies();
    }

    private List<Movie> loadMovies() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            return (List<Movie>) ois.readObject();
        } catch (Exception e) {
            return new ArrayList<>();
        }
    }

    private void saveMovies() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(movies);
        } catch (IOException e) {
            System.out.println("Error saving movies.");
        }
    }

    public void addMovie(String name, String genre, int year) throws MovieStoreFullException {
        if (movies.size() >= MAX_MOVIES) {
            throw new MovieStoreFullException("Cannot add more movies. Movie store is full.");
        }
        Movie m = new Movie(name, genre, year);
        movies.add(m);
        saveMovies();
        System.out.println("Movie added successfully.");
    }

    public void displayMovies() throws MovieStoreEmptyException {
        if (movies.isEmpty()) {
            throw new MovieStoreEmptyException("No movies to display.");
        }
        for (Movie m : movies) {
            System.out.println(m);
        }
    }

    public void deleteMovie(String id) throws MovieStoreEmptyException {
        if (movies.isEmpty()) {
            throw new MovieStoreEmptyException("No movies to delete.");
        }
        movies.removeIf(m -> m.id.equals(id));
        saveMovies();
        System.out.println("Movie deleted (if existed).");
    }

    public void clearMovies() {
        movies.clear();
        saveMovies();
        System.out.println("All movies cleared.");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        SimpleMoviesApp app = new SimpleMoviesApp();

        while (true) {
            System.out.println("\n1. Display movies\n2. Add movies\n3. Delete Movie\n4. Clear all\n5. Exit");
            int choice = sc.nextInt();
            sc.nextLine(); // clear newline

            try {
                switch (choice) {
                    case 1:
                        app.displayMovies();
                        break;
                    case 2:
                        System.out.print("Enter name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter genre: ");
                        String genre = sc.nextLine();
                        System.out.print("Enter year: ");
                        int year = sc.nextInt();
                        app.addMovie(name, genre, year);
                        break;
                    case 3:
                        System.out.print("Enter movie ID to delete: ");
                        String id = sc.nextLine();
                        app.deleteMovie(id);
                        break;
                    case 4:
                        app.clearMovies();
                        break;
                    case 5:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid choice.");
                }
            } catch (MovieStoreFullException | MovieStoreEmptyException e) {
                System.out.println(e.getMessage());
            }
        }
    }
}
