package com.tss.test;

import com.tss.model.CartEmptyException;
import com.tss.model.CartSerializer;
import com.tss.model.Customer;
import com.tss.model.LineItem;
import com.tss.model.Order;
import com.tss.model.Product;

import java.util.*;

public class ProductTest {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int lineItemId = 1;

        // Load customer from file
        Customer customer = CartSerializer.loadCart();

        // Ask for customer details if not found
        if (customer == null) {
            System.out.print("Enter Customer ID: ");
            int custId = sc.nextInt();
            sc.nextLine(); // consume newline

            System.out.print("Enter Customer Name: ");
            String name = sc.nextLine();

            customer = new Customer(custId, name);
        }

        System.out.print("Enter Order ID: ");
        int orderId = sc.nextInt();
        Order order = new Order(orderId);

        // Predefined Products
        List<Product> products = Arrays.asList(
                new Product(1, "Laptop", 60000, 10),
                new Product(2, "Mouse", 1000, 5),
                new Product(3, "Book", 500, 15),
                new Product(4, "Phone", 15000, 12)
        );

        boolean adding = true;

        while (adding) {
            System.out.println("\nAvailable Products:");
            for (Product p : products) {
                System.out.println("ID: " + p.getId() + ", Name: " + p.getName()
                        + ", Price: " + p.getPrice() + ", Discount: " + p.getDiscountPercent() + "%");
            }

            System.out.print("Enter Product ID to add: ");
            int pid = sc.nextInt();
            Product selected = products.stream().filter(p -> p.getId() == pid).findFirst().orElse(null);

            if (selected == null) {
                System.out.println("Invalid product ID.");
                continue;
            }

            System.out.print("Enter quantity: ");
            int qty = sc.nextInt();

            order.addLineItem(new LineItem(lineItemId++, qty, selected));

            System.out.print("Add another item? (y/n): ");
            String more = sc.next().toLowerCase();
            adding = more.equals("y");
        }

        // Add order to customer
        customer.addOrder(order);

        // Save updated cart
        CartSerializer.saveCart(customer);

        // Display bill
        System.out.println("\nCustomer: " + customer.getName());
        if (customer.getOrders().isEmpty()) {
            try {
                throw new CartEmptyException("Cart is empty!");
            } catch (CartEmptyException e) {
                System.out.println(e.getMessage());
            }
        } else {
            for (Order o : customer.getOrders()) {
                System.out.println("\nOrder #" + o.getId() + " - " + o.getDate());
                System.out.printf("%-10s%-10s%-10s%-15s%-15s%-15s%n",
                        "LineItem", "ProdID", "Name", "Qty", "Discounted Price", "Total Cost");
                for (LineItem item : o.getItems()) {
                    Product p = item.getProduct();
                    double dp = p.calculateDiscountedPrice();
                    double total = item.calculateLineItemCost();

                    System.out.printf("%-10d%-10d%-10s%-15d%-15.2f%-15.2f%n",
                            item.getId(), p.getId(), p.getName(), item.getQuantity(), dp, total);
                }
                System.out.println("Order Total: " + o.calculateOrderPrice());
            }
        }

        System.out.println("\n********** Thank you for shopping with us! **********");
    }
}
