package com.tss.test;

import com.tss.model.CartEmptyException;
import com.tss.model.CartSerializer;
import com.tss.model.Customer;
import com.tss.model.LineItem;
import com.tss.model.Order;
import com.tss.model.Product;

public class ProductTest {

	

		    public static void main(String[] args) {
	        // Load customer if previously saved
	        Customer customer = CartSerializer.loadCart();
	        if (customer == null) {
	            customer = new Customer(101, "Alice");
	        }

	        // Create products
	        Product p1 = new Product(1, "Laptop", 60000, 10);
	        Product p2 = new Product(2, "Mouse", 1000, 5);

	        // Create order
	        Order order = new Order(1);
	        order.addLineItem(new LineItem(1, 1, p1));
	        order.addLineItem(new LineItem(2, 2, p2));

	        // Add order to customer
	        customer.addOrder(order);

	        // Save cart
	        CartSerializer.saveCart(customer);

	        // Display
	        System.out.println("Customer: " + customer.getName());
	        if (customer.getOrders().isEmpty()) {
	            try {
	                throw new CartEmptyException("Cart is empty!");
	            } catch (CartEmptyException e) {
	                System.out.println(e.getMessage());
	            }
	        } else {
	            for (Order o : customer.getOrders()) {
	                System.out.println("\nOrder #" + o.getId() + " - " + o.getDate());
	                for (LineItem item : o.getItems()) {
	                    System.out.println("Product: " + item.getProduct().getName() +
	                            ", Qty: " + item.getQuantity() +
	                            ", Price per unit (discounted): " + item.getProduct().calculateDiscountedPrice() +
	                            ", Total: " + item.calculateLineItemCost());
	                }
	                System.out.println("Order Total: " + o.calculateOrderPrice());
	            }
	        }
	    }
	
}
